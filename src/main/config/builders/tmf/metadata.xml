<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE builder PUBLIC "-//MMBase/DTD builder config 1.1//EN" "http://www.mmbase.org/dtd/builder_1_1.dtd">
<builder extends="object" maintainer="balie.org" name="metadata" version="0">
  <!-- Builder configuration for metadata -->
  <!-- Status of the builder: active or inactive -->
  <status>active</status>
  <!-- Classname of the builder.
This is a optional tag, it names the classfile to use for this builder
Providing an alternate buidler class allows you to add or change support routines. -->
  <classfile>Dummy</classfile>
  <!-- The default maximum age of objects in a search
used by some MMBase editors to limit the results of a search -->
  <searchage>1400</searchage>
  <!-- Names defines the different names used in user visible parts
Singular names are used when talking about one object (Url,Person) and plurar when talking about multiple objects (Urls, people).
Names can be provided in various languages. -->
  <names>
    <!-- singular names per language as defined by ISO 639 -->
    <singular xml:lang="nl">Metadata</singular>
    <singular xml:lang="en">Metadata</singular>
    <!-- plural names per language as defined by ISO 639 -->
    <plural xml:lang="nl">Metadata</plural>
    <plural xml:lang="en">Metadata</plural>
  </names>
  <!-- Descriptions are ment to provide some additional clarification to an object.
They are useful for GUI editors to provide helptexts.
Descriptions can be provided in various languages. -->
  <descriptions>
    <description xml:lang="nl">(Streaming)audio of (streaming)video</description>
    <description xml:lang="en">(Streaming)audio or (streaming)video</description>
  </descriptions>
  <!-- decsription per language as defined by ISO 639 -->
  <!-- You can define properties to be used by the classfile.
Properties are entered using name/value pairs.
The actual properties available differ by class. -->
  <properties>
    <property name="max-nodes-from-query">1000</property>
  </properties>
  <!-- defines the different fields in this object
Depending on the database, the order of the fields may be important.
Once defined, it is a good practice to keep the same order.
This counts especially when you convert buidler configurations using builder inheritance. -->
  <fieldlist>
    <!-- field definition for field 4 : theme -->
    <field name="theme">
      <!-- gui related -->
      <gui>
        <guiname xml:lang="nl">Thema</guiname>
        <guiname xml:lang="en">Theme</guiname>
        <guitype>string</guitype>
      </gui>
      <!-- editor related -->
      <editor>
        <positions>
          <!-- position in the input area of the editor -->
          <input>1</input>
          <!-- position in the list area of the editor -->
          <list>-1</list>
          <!-- position in the search area of the editor -->
          <search>2</search>
        </positions>
      </editor>
      <datatype base="line" xmlns="http://www.mmbase.org/xmlns/datatypes">
        <maxLength value="255" />
      </datatype>
    </field>
    
    <!-- field definition for field 5 : keys -->
    <field name="keys">
      <!-- gui related -->
      <gui>
        <guiname xml:lang="nl">Trefwoorden</guiname>
        <guiname xml:lang="en">Keywords</guiname>
        <guitype>string</guitype>
      </gui>
      <!-- editor related -->
      <editor>
        <positions>
          <!-- position in the input area of the editor -->
          <input>2</input>
          <!-- position in the list area of the editor -->
          <list>-1</list>
          <!-- position in the search area of the editor -->
          <search>3</search>
        </positions>
      </editor>
      <datatype base="field" xmlns="http://www.mmbase.org/xmlns/datatypes">
        <maxLength value="2048" />
      </datatype>
    </field> 
  </fieldlist>
</builder>
